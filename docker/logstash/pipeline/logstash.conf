input {
  file {
    path => "/usr/share/logstash/bot_logs/*.log"
  }
}

filter {
  grok {
    match => {"message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{GREEDYDATA:thread}\] %{LOGLEVEL:loglevel} %{GREEDYDATA:logger} - %{GREEDYDATA:message}"}
    overwrite => [ "message" ]
  }

  grok {
    match => ["path", "/usr/share/logstash/bot_logs/%{GREEDYDATA:bot_name}.log"]
  }

  grok {
    match => {
      "message" => [
        "Going to process %{NUMBER:metric_text_messages.sum} text messages, %{NUMBER:metric_command_messages.sum} command messages, %{NUMBER:metric_keyboard_replies.sum} keyboard replies",
        "Updated state contains %{NUMBER:metric_dialogs.max} dialogs, %{NUMBER:metric_scheduled_commands.max} scheduled commands"
      ]
    }
    add_tag => [ "metric" ]
  }

  grok {
    match => {
      "message" => ["Unable to load new updates from offset=%{NUMBER:metric_unable_load_offset.max}"]
    }
    add_tag => ["fail_to_load_updates"]
  }

  grok {
    match => {
      "message" => ["Unable to send request: %{DATA:metric_unable_send_request}"]
    }
    add_tag => ["unable_to_send"]
  }

  grok {
    match => {
      "message" => ["Unable to get updates from Telegram server. Return code [%{NUMBER:metric_unable_get_returnCode.max}]"]
    }
    add_tag => ["fail_to_request"]
  }

  if "fail_to_load_updates" in [tags] {
    metrics {
      meter => "fail_to_load_updates"
      add_tag => "metric"
    }
  }

  if "unable_to_send" in [tags] {
    metrics {
      meter => "unable_to_send"
      add_tag => "metric"
    }
  }

  if "fail_to_request" in [tags] {
    metrics {
      meter => "fail_to_request"
      add_tag => "metric"
    }
  }
}

output {
if "metric" in [tags] {
  graphite {
      host => "graphite"
      resend_on_failure => true
      fields_are_metrics => true
      metrics_format => "telegram.bot.%{bot_name}.*"
    }
  }
}
